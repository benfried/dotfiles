(in-package #:common-lisp-jupyter)


(defparameter +clhs-map-root+ "http://www.lispworks.com/documentation/HyperSpec/Body/")
(defparameter +clhs-map+
  '(("&ALLOW-OTHER-KEYS" . "03_da.htm") ("&AUX" . "03_da.htm")
    ("&BODY" . "03_dd.htm") ("&ENVIRONMENT" . "03_dd.htm") ("&KEY" . "03_da.htm")
    ("&OPTIONAL" . "03_da.htm") ("&REST" . "03_da.htm") ("&WHOLE" . "03_dd.htm")
    ("*" . "a_st.htm") ("**" . "v__stst_.htm") ("***" . "v__stst_.htm")
    ("*BREAK-ON-SIGNALS*" . "v_break_.htm")
    ("*COMPILE-FILE-PATHNAME*" . "v_cmp_fi.htm")
    ("*COMPILE-FILE-TRUENAME*" . "v_cmp_fi.htm")
    ("*COMPILE-PRINT*" . "v_cmp_pr.htm") ("*COMPILE-VERBOSE*" . "v_cmp_pr.htm")
    ("*DEBUG-IO*" . "v_debug_.htm") ("*DEBUGGER-HOOK*" . "v_debugg.htm")
    ("*DEFAULT-PATHNAME-DEFAULTS*" . "v_defaul.htm")
    ("*ERROR-OUTPUT*" . "v_debug_.htm") ("*FEATURES*" . "v_featur.htm")
    ("*GENSYM-COUNTER*" . "v_gensym.htm") ("*LOAD-PATHNAME*" . "v_ld_pns.htm")
    ("*LOAD-PRINT*" . "v_ld_prs.htm") ("*LOAD-TRUENAME*" . "v_ld_pns.htm")
    ("*LOAD-VERBOSE*" . "v_ld_prs.htm") ("*MACROEXPAND-HOOK*" . "v_mexp_h.htm")
    ("*MODULES*" . "v_module.htm") ("*PACKAGE*" . "v_pkg.htm")
    ("*PRINT-ARRAY*" . "v_pr_ar.htm") ("*PRINT-BASE*" . "v_pr_bas.htm")
    ("*PRINT-CASE*" . "v_pr_cas.htm") ("*PRINT-CIRCLE*" . "v_pr_cir.htm")
    ("*PRINT-ESCAPE*" . "v_pr_esc.htm") ("*PRINT-GENSYM*" . "v_pr_gen.htm")
    ("*PRINT-LENGTH*" . "v_pr_lev.htm") ("*PRINT-LEVEL*" . "v_pr_lev.htm")
    ("*PRINT-LINES*" . "v_pr_lin.htm") ("*PRINT-MISER-WIDTH*" . "v_pr_mis.htm")
    ("*PRINT-PPRINT-DISPATCH*" . "v_pr_ppr.htm")
    ("*PRINT-PRETTY*" . "v_pr_pre.htm") ("*PRINT-RADIX*" . "v_pr_bas.htm")
    ("*PRINT-READABLY*" . "v_pr_rda.htm")
    ("*PRINT-RIGHT-MARGIN*" . "v_pr_rig.htm") ("*QUERY-IO*" . "v_debug_.htm")
    ("*RANDOM-STATE*" . "v_rnd_st.htm") ("*READ-BASE*" . "v_rd_bas.htm")
    ("*READ-DEFAULT-FLOAT-FORMAT*" . "v_rd_def.htm")
    ("*READ-EVAL*" . "v_rd_eva.htm") ("*READ-SUPPRESS*" . "v_rd_sup.htm")
    ("*READTABLE*" . "v_rdtabl.htm") ("*STANDARD-INPUT*" . "v_debug_.htm")
    ("*STANDARD-OUTPUT*" . "v_debug_.htm") ("*TERMINAL-IO*" . "v_termin.htm")
    ("*TRACE-OUTPUT*" . "v_debug_.htm") ("+" . "a_pl.htm") ("++" . "v_pl_plp.htm")
    ("+++" . "v_pl_plp.htm") ("-" . "a__.htm") ("/" . "a_sl.htm")
    ("//" . "v_sl_sls.htm") ("///" . "v_sl_sls.htm") ("/=" . "f_eq_sle.htm")
    ("1+" . "f_1pl_1_.htm") ("1-" . "f_1pl_1_.htm") ("<" . "f_eq_sle.htm")
    ("<=" . "f_eq_sle.htm") ("=" . "f_eq_sle.htm") (">" . "f_eq_sle.htm")
    (">=" . "f_eq_sle.htm") ("ABORT" . "a_abort.htm") ("ABS" . "f_abs.htm")
    ("ACONS" . "f_acons.htm") ("ACOS" . "f_asin_.htm") ("ACOSH" . "f_sinh_.htm")
    ("ADD-METHOD" . "f_add_me.htm") ("ADJOIN" . "f_adjoin.htm")
    ("ADJUST-ARRAY" . "f_adjust.htm") ("ADJUSTABLE-ARRAY-P" . "f_adju_1.htm")
    ("ALLOCATE-INSTANCE" . "f_alloca.htm") ("ALPHA-CHAR-P" . "f_alpha_.htm")
    ("ALPHANUMERICP" . "f_alphan.htm") ("AND" . "a_and.htm")
    ("APPEND" . "f_append.htm") ("APPLY" . "f_apply.htm")
    ("APROPOS" . "f_apropo.htm") ("APROPOS-LIST" . "f_apropo.htm")
    ("AREF" . "f_aref.htm") ("ARITHMETIC-ERROR" . "e_arithm.htm")
    ("ARITHMETIC-ERROR-OPERANDS" . "f_arithm.htm")
    ("ARITHMETIC-ERROR-OPERATION" . "f_arithm.htm") ("ARRAY" . "t_array.htm")
    ("ARRAY-DIMENSION" . "f_ar_dim.htm")
    ("ARRAY-DIMENSION-LIMIT" . "v_ar_dim.htm")
    ("ARRAY-DIMENSIONS" . "f_ar_d_1.htm") ("ARRAY-DISPLACEMENT" . "f_ar_dis.htm")
    ("ARRAY-ELEMENT-TYPE" . "f_ar_ele.htm")
    ("ARRAY-HAS-FILL-POINTER-P" . "f_ar_has.htm")
    ("ARRAY-IN-BOUNDS-P" . "f_ar_in_.htm") ("ARRAY-RANK" . "f_ar_ran.htm")
    ("ARRAY-RANK-LIMIT" . "v_ar_ran.htm")
    ("ARRAY-ROW-MAJOR-INDEX" . "f_ar_row.htm")
    ("ARRAY-TOTAL-SIZE" . "f_ar_tot.htm")
    ("ARRAY-TOTAL-SIZE-LIMIT" . "v_ar_tot.htm") ("ARRAYP" . "f_arrayp.htm")
    ("ASH" . "f_ash.htm") ("ASIN" . "f_asin_.htm") ("ASINH" . "f_sinh_.htm")
    ("ASSERT" . "m_assert.htm") ("ASSOC" . "f_assocc.htm")
    ("ASSOC-IF" . "f_assocc.htm") ("ASSOC-IF-NOT" . "f_assocc.htm")
    ("ATAN" . "f_asin_.htm") ("ATANH" . "f_sinh_.htm") ("ATOM" . "a_atom.htm")
    ("BASE-CHAR" . "t_base_c.htm") ("BASE-STRING" . "t_base_s.htm")
    ("BIGNUM" . "t_bignum.htm") ("BIT" . "a_bit.htm") ("BIT-AND" . "f_bt_and.htm")
    ("BIT-ANDC1" . "f_bt_and.htm") ("BIT-ANDC2" . "f_bt_and.htm")
    ("BIT-EQV" . "f_bt_and.htm") ("BIT-IOR" . "f_bt_and.htm")
    ("BIT-NAND" . "f_bt_and.htm") ("BIT-NOR" . "f_bt_and.htm")
    ("BIT-NOT" . "f_bt_and.htm") ("BIT-ORC1" . "f_bt_and.htm")
    ("BIT-ORC2" . "f_bt_and.htm") ("BIT-VECTOR" . "t_bt_vec.htm")
    ("BIT-VECTOR-P" . "f_bt_vec.htm") ("BIT-XOR" . "f_bt_and.htm")
    ("BLOCK" . "s_block.htm") ("BOOLE" . "f_boole.htm")
    ("BOOLE-1" . "v_b_1_b.htm") ("BOOLE-2" . "v_b_1_b.htm")
    ("BOOLE-AND" . "v_b_1_b.htm") ("BOOLE-ANDC1" . "v_b_1_b.htm")
    ("BOOLE-ANDC2" . "v_b_1_b.htm") ("BOOLE-C1" . "v_b_1_b.htm")
    ("BOOLE-C2" . "v_b_1_b.htm") ("BOOLE-CLR" . "v_b_1_b.htm")
    ("BOOLE-EQV" . "v_b_1_b.htm") ("BOOLE-IOR" . "v_b_1_b.htm")
    ("BOOLE-NAND" . "v_b_1_b.htm") ("BOOLE-NOR" . "v_b_1_b.htm")
    ("BOOLE-ORC1" . "v_b_1_b.htm") ("BOOLE-ORC2" . "v_b_1_b.htm")
    ("BOOLE-SET" . "v_b_1_b.htm") ("BOOLE-XOR" . "v_b_1_b.htm")
    ("BOOLEAN" . "t_ban.htm") ("BOTH-CASE-P" . "f_upper_.htm")
    ("BOUNDP" . "f_boundp.htm") ("BREAK" . "f_break.htm")
    ("BROADCAST-STREAM" . "t_broadc.htm")
    ("BROADCAST-STREAM-STREAMS" . "f_broadc.htm")
    ("BUILT-IN-CLASS" . "t_built_.htm") ("BUTLAST" . "f_butlas.htm")
    ("BYTE" . "f_by_by.htm") ("BYTE-POSITION" . "f_by_by.htm")
    ("BYTE-SIZE" . "f_by_by.htm") ("CAAAAR" . "f_car_c.htm")
    ("CAAADR" . "f_car_c.htm") ("CAAAR" . "f_car_c.htm")
    ("CAADAR" . "f_car_c.htm") ("CAADDR" . "f_car_c.htm")
    ("CAADR" . "f_car_c.htm") ("CAAR" . "f_car_c.htm") ("CADAAR" . "f_car_c.htm")
    ("CADADR" . "f_car_c.htm") ("CADAR" . "f_car_c.htm")
    ("CADDAR" . "f_car_c.htm") ("CADDDR" . "f_car_c.htm")
    ("CADDR" . "f_car_c.htm") ("CADR" . "f_car_c.htm")
    ("CALL-ARGUMENTS-LIMIT" . "v_call_a.htm") ("CALL-METHOD" . "m_call_m.htm")
    ("CALL-NEXT-METHOD" . "f_call_n.htm") ("CAR" . "f_car_c.htm")
    ("CASE" . "m_case_.htm") ("CATCH" . "s_catch.htm") ("CCASE" . "m_case_.htm")
    ("CDAAAR" . "f_car_c.htm") ("CDAADR" . "f_car_c.htm")
    ("CDAAR" . "f_car_c.htm") ("CDADAR" . "f_car_c.htm")
    ("CDADDR" . "f_car_c.htm") ("CDADR" . "f_car_c.htm") ("CDAR" . "f_car_c.htm")
    ("CDDAAR" . "f_car_c.htm") ("CDDADR" . "f_car_c.htm")
    ("CDDAR" . "f_car_c.htm") ("CDDDAR" . "f_car_c.htm")
    ("CDDDDR" . "f_car_c.htm") ("CDDDR" . "f_car_c.htm") ("CDDR" . "f_car_c.htm")
    ("CDR" . "f_car_c.htm") ("CEILING" . "f_floorc.htm")
    ("CELL-ERROR" . "e_cell_e.htm") ("CELL-ERROR-NAME" . "f_cell_e.htm")
    ("CERROR" . "f_cerror.htm") ("CHANGE-CLASS" . "f_chg_cl.htm")
    ("CHAR" . "f_char_.htm") ("CHAR-CODE" . "f_char_c.htm")
    ("CHAR-CODE-LIMIT" . "v_char_c.htm") ("CHAR-DOWNCASE" . "f_char_u.htm")
    ("CHAR-EQUAL" . "f_chareq.htm") ("CHAR-GREATERP" . "f_chareq.htm")
    ("CHAR-INT" . "f_char_i.htm") ("CHAR-LESSP" . "f_chareq.htm")
    ("CHAR-NAME" . "f_char_n.htm") ("CHAR-NOT-EQUAL" . "f_chareq.htm")
    ("CHAR-NOT-GREATERP" . "f_chareq.htm") ("CHAR-NOT-LESSP" . "f_chareq.htm")
    ("CHAR-UPCASE" . "f_char_u.htm") ("CHAR/=" . "f_chareq.htm")
    ("CHAR<" . "f_chareq.htm") ("CHAR<=" . "f_chareq.htm")
    ("CHAR=" . "f_chareq.htm") ("CHAR>" . "f_chareq.htm")
    ("CHAR>=" . "f_chareq.htm") ("CHARACTER" . "a_ch.htm")
    ("CHARACTERP" . "f_chp.htm") ("CHECK-TYPE" . "m_check_.htm")
    ("CIS" . "f_cis.htm") ("CLASS" . "t_class.htm")
    ("CLASS-NAME" . "f_class_.htm") ("CLASS-OF" . "f_clas_1.htm")
    ("CLEAR-INPUT" . "f_clear_.htm") ("CLEAR-OUTPUT" . "f_finish.htm")
    ("CLOSE" . "f_close.htm") ("CLRHASH" . "f_clrhas.htm")
    ("CODE-CHAR" . "f_code_c.htm") ("COERCE" . "f_coerce.htm")
    ("COMPILATION-SPEED" . "d_optimi.htm") ("COMPILE" . "f_cmp.htm")
    ("COMPILE-FILE" . "f_cmp_fi.htm") ("COMPILE-FILE-PATHNAME" . "f_cmp__1.htm")
    ("COMPILED-FUNCTION" . "t_cmpd_f.htm")
    ("COMPILED-FUNCTION-P" . "f_cmpd_f.htm") ("COMPILER-MACRO" . "f_docume.htm")
    ("COMPILER-MACRO-FUNCTION" . "f_cmp_ma.htm") ("COMPLEMENT" . "f_comple.htm")
    ("COMPLEX" . "a_comple.htm") ("COMPLEXP" . "f_comp_3.htm")
    ("COMPUTE-APPLICABLE-METHODS" . "f_comput.htm")
    ("COMPUTE-RESTARTS" . "f_comp_1.htm") ("CONCATENATE" . "f_concat.htm")
    ("CONCATENATED-STREAM" . "t_concat.htm")
    ("CONCATENATED-STREAM-STREAMS" . "f_conc_1.htm") ("COND" . "m_cond.htm")
    ("CONDITION" . "e_cnd.htm") ("CONJUGATE" . "f_conjug.htm")
    ("CONS" . "a_cons.htm") ("CONSP" . "f_consp.htm")
    ("CONSTANTLY" . "f_cons_1.htm") ("CONSTANTP" . "f_consta.htm")
    ("CONTINUE" . "a_contin.htm") ("CONTROL-ERROR" . "e_contro.htm")
    ("COPY-ALIST" . "f_cp_ali.htm") ("COPY-LIST" . "f_cp_lis.htm")
    ("COPY-PPRINT-DISPATCH" . "f_cp_ppr.htm") ("COPY-READTABLE" . "f_cp_rdt.htm")
    ("COPY-SEQ" . "f_cp_seq.htm") ("COPY-STRUCTURE" . "f_cp_stu.htm")
    ("COPY-SYMBOL" . "f_cp_sym.htm") ("COPY-TREE" . "f_cp_tre.htm")
    ("COS" . "f_sin_c.htm") ("COSH" . "f_sinh_.htm") ("COUNT" . "f_countc.htm")
    ("COUNT-IF" . "f_countc.htm") ("COUNT-IF-NOT" . "f_countc.htm")
    ("CTYPECASE" . "m_tpcase.htm") ("DEBUG" . "d_optimi.htm")
    ("DECF" . "m_incf_.htm") ("DECLAIM" . "m_declai.htm")
    ("DECLARATION" . "d_declar.htm") ("DECLARE" . "s_declar.htm")
    ("DECODE-FLOAT" . "f_dec_fl.htm") ("DECODE-UNIVERSAL-TIME" . "f_dec_un.htm")
    ("DEFCLASS" . "m_defcla.htm") ("DEFCONSTANT" . "m_defcon.htm")
    ("DEFGENERIC" . "m_defgen.htm") ("DEFINE-COMPILER-MACRO" . "m_define.htm")
    ("DEFINE-CONDITION" . "m_defi_5.htm")
    ("DEFINE-METHOD-COMBINATION" . "m_defi_4.htm")
    ("DEFINE-MODIFY-MACRO" . "m_defi_2.htm")
    ("DEFINE-SETF-EXPANDER" . "m_defi_3.htm")
    ("DEFINE-SYMBOL-MACRO" . "m_defi_1.htm") ("DEFMACRO" . "m_defmac.htm")
    ("DEFMETHOD" . "m_defmet.htm") ("DEFPACKAGE" . "m_defpkg.htm")
    ("DEFPARAMETER" . "m_defpar.htm") ("DEFSETF" . "m_defset.htm")
    ("DEFSTRUCT" . "m_defstr.htm") ("DEFTYPE" . "m_deftp.htm")
    ("DEFUN" . "m_defun.htm") ("DEFVAR" . "m_defpar.htm")
    ("DELETE" . "f_rm_rm.htm") ("DELETE-DUPLICATES" . "f_rm_dup.htm")
    ("DELETE-FILE" . "f_del_fi.htm") ("DELETE-IF" . "f_rm_rm.htm")
    ("DELETE-IF-NOT" . "f_rm_rm.htm") ("DELETE-PACKAGE" . "f_del_pk.htm")
    ("DENOMINATOR" . "f_numera.htm") ("DEPOSIT-FIELD" . "f_deposi.htm")
    ("DESCRIBE" . "f_descri.htm") ("DESCRIBE-OBJECT" . "f_desc_1.htm")
    ("DESTRUCTURING-BIND" . "m_destru.htm") ("DIGIT-CHAR" . "f_digit_.htm")
    ("DIGIT-CHAR-P" . "f_digi_1.htm") ("DIRECTORY" . "f_dir.htm")
    ("DIRECTORY-NAMESTRING" . "f_namest.htm") ("DISASSEMBLE" . "f_disass.htm")
    ("DIVISION-BY-ZERO" . "e_divisi.htm") ("DO" . "m_do_do.htm")
    ("DO*" . "m_do_do.htm") ("DO-ALL-SYMBOLS" . "m_do_sym.htm")
    ("DO-EXTERNAL-SYMBOLS" . "m_do_sym.htm") ("DO-SYMBOLS" . "m_do_sym.htm")
    ("DOCUMENTATION" . "f_docume.htm") ("DOLIST" . "m_dolist.htm")
    ("DOTIMES" . "m_dotime.htm") ("DOUBLE-FLOAT" . "t_short_.htm")
    ("DOUBLE-FLOAT-EPSILON" . "v_short_.htm")
    ("DOUBLE-FLOAT-NEGATIVE-EPSILON" . "v_short_.htm") ("DPB" . "f_dpb.htm")
    ("DRIBBLE" . "f_dribbl.htm") ("DYNAMIC-EXTENT" . "d_dynami.htm")
    ("ECASE" . "m_case_.htm") ("ECHO-STREAM" . "t_echo_s.htm")
    ("ECHO-STREAM-INPUT-STREAM" . "f_echo_s.htm")
    ("ECHO-STREAM-OUTPUT-STREAM" . "f_echo_s.htm") ("ED" . "f_ed.htm")
    ("EIGHTH" . "f_firstc.htm") ("ELT" . "f_elt.htm")
    ("ENCODE-UNIVERSAL-TIME" . "f_encode.htm") ("END-OF-FILE" . "e_end_of.htm")
    ("ENDP" . "f_endp.htm") ("ENOUGH-NAMESTRING" . "f_namest.htm")
    ("ENSURE-DIRECTORIES-EXIST" . "f_ensu_1.htm")
    ("ENSURE-GENERIC-FUNCTION" . "f_ensure.htm") ("EQ" . "f_eq.htm")
    ("EQL" . "a_eql.htm") ("EQUAL" . "f_equal.htm") ("EQUALP" . "f_equalp.htm")
    ("ERROR" . "a_error.htm") ("ETYPECASE" . "m_tpcase.htm")
    ("EVAL" . "f_eval.htm") ("EVAL-WHEN" . "s_eval_w.htm")
    ("EVENP" . "f_evenpc.htm") ("EVERY" . "f_everyc.htm") ("EXP" . "f_exp_e.htm")
    ("EXPORT" . "f_export.htm") ("EXPT" . "f_exp_e.htm")
    ("EXTENDED-CHAR" . "t_extend.htm") ("FBOUNDP" . "f_fbound.htm")
    ("FCEILING" . "f_floorc.htm") ("FDEFINITION" . "f_fdefin.htm")
    ("FFLOOR" . "f_floorc.htm") ("FIFTH" . "f_firstc.htm")
    ("FILE-AUTHOR" . "f_file_a.htm") ("FILE-ERROR" . "e_file_e.htm")
    ("FILE-ERROR-PATHNAME" . "f_file_e.htm") ("FILE-LENGTH" . "f_file_l.htm")
    ("FILE-NAMESTRING" . "f_namest.htm") ("FILE-POSITION" . "f_file_p.htm")
    ("FILE-STREAM" . "t_file_s.htm") ("FILE-STRING-LENGTH" . "f_file_s.htm")
    ("FILE-WRITE-DATE" . "f_file_w.htm") ("FILL" . "f_fill.htm")
    ("FILL-POINTER" . "f_fill_p.htm") ("FIND" . "f_find_.htm")
    ("FIND-ALL-SYMBOLS" . "f_find_a.htm") ("FIND-CLASS" . "f_find_c.htm")
    ("FIND-IF" . "f_find_.htm") ("FIND-IF-NOT" . "f_find_.htm")
    ("FIND-METHOD" . "f_find_m.htm") ("FIND-PACKAGE" . "f_find_p.htm")
    ("FIND-RESTART" . "f_find_r.htm") ("FIND-SYMBOL" . "f_find_s.htm")
    ("FINISH-OUTPUT" . "f_finish.htm") ("FIRST" . "f_firstc.htm")
    ("FIXNUM" . "t_fixnum.htm") ("FLET" . "s_flet_.htm") ("FLOAT" . "a_float.htm")
    ("FLOAT-DIGITS" . "f_dec_fl.htm") ("FLOAT-PRECISION" . "f_dec_fl.htm")
    ("FLOAT-RADIX" . "f_dec_fl.htm") ("FLOAT-SIGN" . "f_dec_fl.htm")
    ("FLOATING-POINT-INEXACT" . "e_floa_1.htm")
    ("FLOATING-POINT-INVALID-OPERATION" . "e_floati.htm")
    ("FLOATING-POINT-OVERFLOW" . "e_floa_2.htm")
    ("FLOATING-POINT-UNDERFLOW" . "e_floa_3.htm") ("FLOATP" . "f_floatp.htm")
    ("FLOOR" . "f_floorc.htm") ("FMAKUNBOUND" . "f_fmakun.htm")
    ("FORCE-OUTPUT" . "f_finish.htm") ("FORMAT" . "f_format.htm")
    ("FORMATTER" . "m_format.htm") ("FOURTH" . "f_firstc.htm")
    ("FRESH-LINE" . "f_terpri.htm") ("FROUND" . "f_floorc.htm")
    ("FTRUNCATE" . "f_floorc.htm") ("FTYPE" . "d_ftype.htm")
    ("FUNCALL" . "f_funcal.htm") ("FUNCTION" . "a_fn.htm")
    ("FUNCTION-KEYWORDS" . "f_fn_kwd.htm")
    ("FUNCTION-LAMBDA-EXPRESSION" . "f_fn_lam.htm") ("FUNCTIONP" . "f_fnp.htm")
    ("GCD" . "f_gcd.htm") ("GENERIC-FUNCTION" . "t_generi.htm")
    ("GENSYM" . "f_gensym.htm") ("GENTEMP" . "f_gentem.htm") ("GET" . "f_get.htm")
    ("GET-DECODED-TIME" . "f_get_un.htm")
    ("GET-DISPATCH-MACRO-CHARACTER" . "f_set__1.htm")
    ("GET-INTERNAL-REAL-TIME" . "f_get_in.htm")
    ("GET-INTERNAL-RUN-TIME" . "f_get__1.htm")
    ("GET-MACRO-CHARACTER" . "f_set_ma.htm")
    ("GET-OUTPUT-STREAM-STRING" . "f_get_ou.htm")
    ("GET-PROPERTIES" . "f_get_pr.htm") ("GET-SETF-EXPANSION" . "f_get_se.htm")
    ("GET-UNIVERSAL-TIME" . "f_get_un.htm") ("GETF" . "f_getf.htm")
    ("GETHASH" . "f_gethas.htm") ("GO" . "s_go.htm")
    ("GRAPHIC-CHAR-P" . "f_graphi.htm") ("HANDLER-BIND" . "m_handle.htm")
    ("HANDLER-CASE" . "m_hand_1.htm") ("HASH-TABLE" . "t_hash_t.htm")
    ("HASH-TABLE-COUNT" . "f_hash_1.htm") ("HASH-TABLE-P" . "f_hash_t.htm")
    ("HASH-TABLE-REHASH-SIZE" . "f_hash_2.htm")
    ("HASH-TABLE-REHASH-THRESHOLD" . "f_hash_3.htm")
    ("HASH-TABLE-SIZE" . "f_hash_4.htm") ("HASH-TABLE-TEST" . "f_hash_5.htm")
    ("HOST-NAMESTRING" . "f_namest.htm") ("IDENTITY" . "f_identi.htm")
    ("IF" . "s_if.htm") ("IGNORABLE" . "d_ignore.htm") ("IGNORE" . "d_ignore.htm")
    ("IGNORE-ERRORS" . "m_ignore.htm") ("IMAGPART" . "f_realpa.htm")
    ("IMPORT" . "f_import.htm") ("IN-PACKAGE" . "m_in_pkg.htm")
    ("INCF" . "m_incf_.htm") ("INITIALIZE-INSTANCE" . "f_init_i.htm")
    ("INLINE" . "d_inline.htm") ("INPUT-STREAM-P" . "f_in_stm.htm")
    ("INSPECT" . "f_inspec.htm") ("INTEGER" . "t_intege.htm")
    ("INTEGER-DECODE-FLOAT" . "f_dec_fl.htm") ("INTEGER-LENGTH" . "f_intege.htm")
    ("INTEGERP" . "f_inte_1.htm") ("INTERACTIVE-STREAM-P" . "f_intera.htm")
    ("INTERN" . "f_intern.htm")
    ("INTERNAL-TIME-UNITS-PER-SECOND" . "v_intern.htm")
    ("INTERSECTION" . "f_isec_.htm") ("INVALID-METHOD-ERROR" . "f_invali.htm")
    ("INVOKE-DEBUGGER" . "f_invoke.htm") ("INVOKE-RESTART" . "f_invo_1.htm")
    ("INVOKE-RESTART-INTERACTIVELY" . "f_invo_2.htm") ("ISQRT" . "f_sqrt_.htm")
    ("KEYWORD" . "t_kwd.htm") ("KEYWORDP" . "f_kwdp.htm")
    ("LABELS" . "s_flet_.htm") ("LAMBDA" . "a_lambda.htm")
    ("LAMBDA-LIST-KEYWORDS" . "v_lambda.htm")
    ("LAMBDA-PARAMETERS-LIMIT" . "v_lamb_1.htm") ("LAST" . "f_last.htm")
    ("LCM" . "f_lcm.htm") ("LDB" . "f_ldb.htm") ("LDB-TEST" . "f_ldb_te.htm")
    ("LDIFF" . "f_ldiffc.htm") ("LEAST-NEGATIVE-DOUBLE-FLOAT" . "v_most_1.htm")
    ("LEAST-NEGATIVE-LONG-FLOAT" . "v_most_1.htm")
    ("LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT" . "v_most_1.htm")
    ("LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT" . "v_most_1.htm")
    ("LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT" . "v_most_1.htm")
    ("LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT" . "v_most_1.htm")
    ("LEAST-NEGATIVE-SHORT-FLOAT" . "v_most_1.htm")
    ("LEAST-NEGATIVE-SINGLE-FLOAT" . "v_most_1.htm")
    ("LEAST-POSITIVE-DOUBLE-FLOAT" . "v_most_1.htm")
    ("LEAST-POSITIVE-LONG-FLOAT" . "v_most_1.htm")
    ("LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT" . "v_most_1.htm")
    ("LEAST-POSITIVE-NORMALIZED-LONG-FLOAT" . "v_most_1.htm")
    ("LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT" . "v_most_1.htm")
    ("LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT" . "v_most_1.htm")
    ("LEAST-POSITIVE-SHORT-FLOAT" . "v_most_1.htm")
    ("LEAST-POSITIVE-SINGLE-FLOAT" . "v_most_1.htm") ("LENGTH" . "f_length.htm")
    ("LET" . "s_let_l.htm") ("LET*" . "s_let_l.htm")
    ("LISP-IMPLEMENTATION-TYPE" . "f_lisp_i.htm")
    ("LISP-IMPLEMENTATION-VERSION" . "f_lisp_i.htm") ("LIST" . "a_list.htm")
    ("LIST*" . "f_list_.htm") ("LIST-ALL-PACKAGES" . "f_list_a.htm")
    ("LIST-LENGTH" . "f_list_l.htm") ("LISTEN" . "f_listen.htm")
    ("LISTP" . "f_listp.htm") ("LOAD" . "f_load.htm")
    ("LOAD-LOGICAL-PATHNAME-TRANSLATIONS" . "f_ld_log.htm")
    ("LOAD-TIME-VALUE" . "s_ld_tim.htm") ("LOCALLY" . "s_locall.htm")
    ("LOG" . "f_log.htm") ("LOGAND" . "f_logand.htm")
    ("LOGANDC1" . "f_logand.htm") ("LOGANDC2" . "f_logand.htm")
    ("LOGBITP" . "f_logbtp.htm") ("LOGCOUNT" . "f_logcou.htm")
    ("LOGEQV" . "f_logand.htm") ("LOGICAL-PATHNAME" . "a_logica.htm")
    ("LOGICAL-PATHNAME-TRANSLATIONS" . "f_logica.htm") ("LOGIOR" . "f_logand.htm")
    ("LOGNAND" . "f_logand.htm") ("LOGNOR" . "f_logand.htm")
    ("LOGNOT" . "f_logand.htm") ("LOGORC1" . "f_logand.htm")
    ("LOGORC2" . "f_logand.htm") ("LOGTEST" . "f_logtes.htm")
    ("LOGXOR" . "f_logand.htm") ("LONG-FLOAT" . "t_short_.htm")
    ("LONG-FLOAT-EPSILON" . "v_short_.htm")
    ("LONG-FLOAT-NEGATIVE-EPSILON" . "v_short_.htm")
    ("LONG-SITE-NAME" . "f_short_.htm") ("LOOP" . "m_loop.htm")
    ("LOOP-FINISH" . "m_loop_f.htm") ("LOWER-CASE-P" . "f_upper_.htm")
    ("MACHINE-INSTANCE" . "f_mach_i.htm") ("MACHINE-TYPE" . "f_mach_t.htm")
    ("MACHINE-VERSION" . "f_mach_v.htm") ("MACRO-FUNCTION" . "f_macro_.htm")
    ("MACROEXPAND" . "f_mexp_.htm") ("MACROEXPAND-1" . "f_mexp_.htm")
    ("MACROLET" . "s_flet_.htm") ("MAKE-ARRAY" . "f_mk_ar.htm")
    ("MAKE-BROADCAST-STREAM" . "f_mk_bro.htm")
    ("MAKE-CONCATENATED-STREAM" . "f_mk_con.htm")
    ("MAKE-CONDITION" . "f_mk_cnd.htm")
    ("MAKE-DISPATCH-MACRO-CHARACTER" . "f_mk_dis.htm")
    ("MAKE-ECHO-STREAM" . "f_mk_ech.htm") ("MAKE-HASH-TABLE" . "f_mk_has.htm")
    ("MAKE-INSTANCE" . "f_mk_ins.htm")
    ("MAKE-INSTANCES-OBSOLETE" . "f_mk_i_1.htm") ("MAKE-LIST" . "f_mk_lis.htm")
    ("MAKE-LOAD-FORM" . "f_mk_ld_.htm")
    ("MAKE-LOAD-FORM-SAVING-SLOTS" . "f_mk_l_1.htm")
    ("MAKE-METHOD" . "m_call_m.htm") ("MAKE-PACKAGE" . "f_mk_pkg.htm")
    ("MAKE-PATHNAME" . "f_mk_pn.htm") ("MAKE-RANDOM-STATE" . "f_mk_rnd.htm")
    ("MAKE-SEQUENCE" . "f_mk_seq.htm") ("MAKE-STRING" . "f_mk_stg.htm")
    ("MAKE-STRING-INPUT-STREAM" . "f_mk_s_1.htm")
    ("MAKE-STRING-OUTPUT-STREAM" . "f_mk_s_2.htm")
    ("MAKE-SYMBOL" . "f_mk_sym.htm") ("MAKE-SYNONYM-STREAM" . "f_mk_syn.htm")
    ("MAKE-TWO-WAY-STREAM" . "f_mk_two.htm") ("MAKUNBOUND" . "f_makunb.htm")
    ("MAP" . "f_map.htm") ("MAP-INTO" . "f_map_in.htm") ("MAPC" . "f_mapc_.htm")
    ("MAPCAN" . "f_mapc_.htm") ("MAPCAR" . "f_mapc_.htm")
    ("MAPCON" . "f_mapc_.htm") ("MAPHASH" . "f_maphas.htm")
    ("MAPL" . "f_mapc_.htm") ("MAPLIST" . "f_mapc_.htm")
    ("MASK-FIELD" . "f_mask_f.htm") ("MAX" . "f_max_m.htm")
    ("MEMBER" . "a_member.htm") ("MEMBER-IF" . "f_mem_m.htm")
    ("MEMBER-IF-NOT" . "f_mem_m.htm") ("MERGE" . "f_merge.htm")
    ("MERGE-PATHNAMES" . "f_merge_.htm") ("METHOD" . "t_method.htm")
    ("METHOD-COMBINATION" . "a_method.htm")
    ("METHOD-COMBINATION-ERROR" . "f_meth_1.htm")
    ("METHOD-QUALIFIERS" . "f_method.htm") ("MIN" . "f_max_m.htm")
    ("MINUSP" . "f_minusp.htm") ("MISMATCH" . "f_mismat.htm")
    ("MOD" . "a_mod.htm") ("MOST-NEGATIVE-DOUBLE-FLOAT" . "v_most_1.htm")
    ("MOST-NEGATIVE-FIXNUM" . "v_most_p.htm")
    ("MOST-NEGATIVE-LONG-FLOAT" . "v_most_1.htm")
    ("MOST-NEGATIVE-SHORT-FLOAT" . "v_most_1.htm")
    ("MOST-NEGATIVE-SINGLE-FLOAT" . "v_most_1.htm")
    ("MOST-POSITIVE-DOUBLE-FLOAT" . "v_most_1.htm")
    ("MOST-POSITIVE-FIXNUM" . "v_most_p.htm")
    ("MOST-POSITIVE-LONG-FLOAT" . "v_most_1.htm")
    ("MOST-POSITIVE-SHORT-FLOAT" . "v_most_1.htm")
    ("MOST-POSITIVE-SINGLE-FLOAT" . "v_most_1.htm")
    ("MUFFLE-WARNING" . "a_muffle.htm") ("MULTIPLE-VALUE-BIND" . "m_multip.htm")
    ("MULTIPLE-VALUE-CALL" . "s_multip.htm")
    ("MULTIPLE-VALUE-LIST" . "m_mult_1.htm")
    ("MULTIPLE-VALUE-PROG1" . "s_mult_1.htm")
    ("MULTIPLE-VALUE-SETQ" . "m_mult_2.htm")
    ("MULTIPLE-VALUES-LIMIT" . "v_multip.htm") ("NAME-CHAR" . "f_name_c.htm")
    ("NAMESTRING" . "f_namest.htm") ("NBUTLAST" . "f_butlas.htm")
    ("NCONC" . "f_nconc.htm") ("NEXT-METHOD-P" . "f_next_m.htm")
    ("NIL" . "a_nil.htm") ("NINTERSECTION" . "f_isec_.htm")
    ("NINTH" . "f_firstc.htm") ("NO-APPLICABLE-METHOD" . "f_no_app.htm")
    ("NO-NEXT-METHOD" . "f_no_nex.htm") ("NOT" . "a_not.htm")
    ("NOTANY" . "f_everyc.htm") ("NOTEVERY" . "f_everyc.htm")
    ("NOTINLINE" . "d_inline.htm") ("NRECONC" . "f_revapp.htm")
    ("NREVERSE" . "f_revers.htm") ("NSET-DIFFERENCE" . "f_set_di.htm")
    ("NSET-EXCLUSIVE-OR" . "f_set_ex.htm") ("NSTRING-CAPITALIZE" . "f_stg_up.htm")
    ("NSTRING-DOWNCASE" . "f_stg_up.htm") ("NSTRING-UPCASE" . "f_stg_up.htm")
    ("NSUBLIS" . "f_sublis.htm") ("NSUBST" . "f_substc.htm")
    ("NSUBST-IF" . "f_substc.htm") ("NSUBST-IF-NOT" . "f_substc.htm")
    ("NSUBSTITUTE" . "f_sbs_s.htm") ("NSUBSTITUTE-IF" . "f_sbs_s.htm")
    ("NSUBSTITUTE-IF-NOT" . "f_sbs_s.htm") ("NTH" . "f_nth.htm")
    ("NTH-VALUE" . "m_nth_va.htm") ("NTHCDR" . "f_nthcdr.htm")
    ("NULL" . "a_null.htm") ("NUMBER" . "t_number.htm") ("NUMBERP" . "f_nump.htm")
    ("NUMERATOR" . "f_numera.htm") ("NUNION" . "f_unionc.htm")
    ("ODDP" . "f_evenpc.htm") ("OPEN" . "f_open.htm")
    ("OPEN-STREAM-P" . "f_open_s.htm") ("OPTIMIZE" . "d_optimi.htm")
    ("OR" . "a_or.htm") ("OTHERWISE" . "m_case_.htm")
    ("OUTPUT-STREAM-P" . "f_in_stm.htm") ("PACKAGE" . "t_pkg.htm")
    ("PACKAGE-ERROR" . "e_pkg_er.htm") ("PACKAGE-ERROR-PACKAGE" . "f_pkg_er.htm")
    ("PACKAGE-NAME" . "f_pkg_na.htm") ("PACKAGE-NICKNAMES" . "f_pkg_ni.htm")
    ("PACKAGE-SHADOWING-SYMBOLS" . "f_pkg_sh.htm")
    ("PACKAGE-USE-LIST" . "f_pkg_us.htm")
    ("PACKAGE-USED-BY-LIST" . "f_pkg__1.htm") ("PACKAGEP" . "f_pkgp.htm")
    ("PAIRLIS" . "f_pairli.htm") ("PARSE-ERROR" . "e_parse_.htm")
    ("PARSE-INTEGER" . "f_parse_.htm") ("PARSE-NAMESTRING" . "f_pars_1.htm")
    ("PATHNAME" . "a_pn.htm") ("PATHNAME-DEVICE" . "f_pn_hos.htm")
    ("PATHNAME-DIRECTORY" . "f_pn_hos.htm") ("PATHNAME-HOST" . "f_pn_hos.htm")
    ("PATHNAME-MATCH-P" . "f_pn_mat.htm") ("PATHNAME-NAME" . "f_pn_hos.htm")
    ("PATHNAME-TYPE" . "f_pn_hos.htm") ("PATHNAME-VERSION" . "f_pn_hos.htm")
    ("PATHNAMEP" . "f_pnp.htm") ("PEEK-CHAR" . "f_peek_c.htm")
    ("PHASE" . "f_phase.htm") ("PI" . "v_pi.htm") ("PLUSP" . "f_minusp.htm")
    ("POP" . "m_pop.htm") ("POSITION" . "f_pos_p.htm")
    ("POSITION-IF" . "f_pos_p.htm") ("POSITION-IF-NOT" . "f_pos_p.htm")
    ("PPRINT" . "f_wr_pr.htm") ("PPRINT-DISPATCH" . "f_ppr_di.htm")
    ("PPRINT-EXIT-IF-LIST-EXHAUSTED" . "m_ppr_ex.htm")
    ("PPRINT-FILL" . "f_ppr_fi.htm") ("PPRINT-INDENT" . "f_ppr_in.htm")
    ("PPRINT-LINEAR" . "f_ppr_fi.htm") ("PPRINT-LOGICAL-BLOCK" . "m_ppr_lo.htm")
    ("PPRINT-NEWLINE" . "f_ppr_nl.htm") ("PPRINT-POP" . "m_ppr_po.htm")
    ("PPRINT-TAB" . "f_ppr_ta.htm") ("PPRINT-TABULAR" . "f_ppr_fi.htm")
    ("PRIN1" . "f_wr_pr.htm") ("PRIN1-TO-STRING" . "f_wr_to_.htm")
    ("PRINC" . "f_wr_pr.htm") ("PRINC-TO-STRING" . "f_wr_to_.htm")
    ("PRINT" . "f_wr_pr.htm") ("PRINT-NOT-READABLE" . "e_pr_not.htm")
    ("PRINT-NOT-READABLE-OBJECT" . "f_pr_not.htm")
    ("PRINT-OBJECT" . "f_pr_obj.htm") ("PRINT-UNREADABLE-OBJECT" . "m_pr_unr.htm")
    ("PROBE-FILE" . "f_probe_.htm") ("PROCLAIM" . "f_procla.htm")
    ("PROG" . "m_prog_.htm") ("PROG*" . "m_prog_.htm") ("PROG1" . "m_prog1c.htm")
    ("PROG2" . "m_prog1c.htm") ("PROGN" . "s_progn.htm")
    ("PROGRAM-ERROR" . "e_progra.htm") ("PROGV" . "s_progv.htm")
    ("PROVIDE" . "f_provid.htm") ("PSETF" . "m_setf_.htm")
    ("PSETQ" . "m_psetq.htm") ("PUSH" . "m_push.htm") ("PUSHNEW" . "m_pshnew.htm")
    ("QUOTE" . "s_quote.htm") ("RANDOM" . "f_random.htm")
    ("RANDOM-STATE" . "t_rnd_st.htm") ("RANDOM-STATE-P" . "f_rnd_st.htm")
    ("RASSOC" . "f_rassoc.htm") ("RASSOC-IF" . "f_rassoc.htm")
    ("RASSOC-IF-NOT" . "f_rassoc.htm") ("RATIO" . "t_ratio.htm")
    ("RATIONAL" . "a_ration.htm") ("RATIONALIZE" . "f_ration.htm")
    ("RATIONALP" . "f_rati_1.htm") ("READ" . "f_rd_rd.htm")
    ("READ-BYTE" . "f_rd_by.htm") ("READ-CHAR" . "f_rd_cha.htm")
    ("READ-CHAR-NO-HANG" . "f_rd_c_1.htm")
    ("READ-DELIMITED-LIST" . "f_rd_del.htm") ("READ-FROM-STRING" . "f_rd_fro.htm")
    ("READ-LINE" . "f_rd_lin.htm") ("READ-PRESERVING-WHITESPACE" . "f_rd_rd.htm")
    ("READ-SEQUENCE" . "f_rd_seq.htm") ("READER-ERROR" . "e_rder_e.htm")
    ("READTABLE" . "t_rdtabl.htm") ("READTABLE-CASE" . "f_rdtabl.htm")
    ("READTABLEP" . "f_rdta_1.htm") ("REAL" . "t_real.htm")
    ("REALP" . "f_realp.htm") ("REALPART" . "f_realpa.htm")
    ("REDUCE" . "f_reduce.htm") ("REINITIALIZE-INSTANCE" . "f_reinit.htm")
    ("REM" . "f_mod_r.htm") ("REMF" . "m_remf.htm") ("REMHASH" . "f_remhas.htm")
    ("REMOVE" . "f_rm_rm.htm") ("REMOVE-DUPLICATES" . "f_rm_dup.htm")
    ("REMOVE-IF" . "f_rm_rm.htm") ("REMOVE-IF-NOT" . "f_rm_rm.htm")
    ("REMOVE-METHOD" . "f_rm_met.htm") ("REMPROP" . "f_rempro.htm")
    ("RENAME-FILE" . "f_rn_fil.htm") ("RENAME-PACKAGE" . "f_rn_pkg.htm")
    ("REPLACE" . "f_replac.htm") ("REQUIRE" . "f_provid.htm")
    ("REST" . "f_rest.htm") ("RESTART" . "t_rst.htm")
    ("RESTART-BIND" . "m_rst_bi.htm") ("RESTART-CASE" . "m_rst_ca.htm")
    ("RESTART-NAME" . "f_rst_na.htm") ("RETURN" . "m_return.htm")
    ("RETURN-FROM" . "s_ret_fr.htm") ("REVAPPEND" . "f_revapp.htm")
    ("REVERSE" . "f_revers.htm") ("ROOM" . "f_room.htm")
    ("ROTATEF" . "m_rotate.htm") ("ROUND" . "f_floorc.htm")
    ("ROW-MAJOR-AREF" . "f_row_ma.htm") ("RPLACA" . "f_rplaca.htm")
    ("RPLACD" . "f_rplaca.htm") ("SAFETY" . "d_optimi.htm")
    ("SATISFIES" . "t_satisf.htm") ("SBIT" . "f_bt_sb.htm")
    ("SCALE-FLOAT" . "f_dec_fl.htm") ("SCHAR" . "f_char_.htm")
    ("SEARCH" . "f_search.htm") ("SECOND" . "f_firstc.htm")
    ("SEQUENCE" . "t_seq.htm") ("SERIOUS-CONDITION" . "e_seriou.htm")
    ("SET" . "f_set.htm") ("SET-DIFFERENCE" . "f_set_di.htm")
    ("SET-DISPATCH-MACRO-CHARACTER" . "f_set__1.htm")
    ("SET-EXCLUSIVE-OR" . "f_set_ex.htm") ("SET-MACRO-CHARACTER" . "f_set_ma.htm")
    ("SET-PPRINT-DISPATCH" . "f_set_pp.htm")
    ("SET-SYNTAX-FROM-CHAR" . "f_set_sy.htm") ("SETF" . "a_setf.htm")
    ("SETQ" . "s_setq.htm") ("SEVENTH" . "f_firstc.htm")
    ("SHADOW" . "f_shadow.htm") ("SHADOWING-IMPORT" . "f_shdw_i.htm")
    ("SHARED-INITIALIZE" . "f_shared.htm") ("SHIFTF" . "m_shiftf.htm")
    ("SHORT-FLOAT" . "t_short_.htm") ("SHORT-FLOAT-EPSILON" . "v_short_.htm")
    ("SHORT-FLOAT-NEGATIVE-EPSILON" . "v_short_.htm")
    ("SHORT-SITE-NAME" . "f_short_.htm") ("SIGNAL" . "f_signal.htm")
    ("SIGNED-BYTE" . "t_sgn_by.htm") ("SIGNUM" . "f_signum.htm")
    ("SIMPLE-ARRAY" . "t_smp_ar.htm") ("SIMPLE-BASE-STRING" . "t_smp_ba.htm")
    ("SIMPLE-BIT-VECTOR" . "t_smp_bt.htm")
    ("SIMPLE-BIT-VECTOR-P" . "f_smp_bt.htm") ("SIMPLE-CONDITION" . "e_smp_cn.htm")
    ("SIMPLE-CONDITION-FORMAT-ARGUMENTS" . "f_smp_cn.htm")
    ("SIMPLE-CONDITION-FORMAT-CONTROL" . "f_smp_cn.htm")
    ("SIMPLE-ERROR" . "e_smp_er.htm") ("SIMPLE-STRING" . "t_smp_st.htm")
    ("SIMPLE-STRING-P" . "f_smp_st.htm") ("SIMPLE-TYPE-ERROR" . "e_smp_tp.htm")
    ("SIMPLE-VECTOR" . "t_smp_ve.htm") ("SIMPLE-VECTOR-P" . "f_smp_ve.htm")
    ("SIMPLE-WARNING" . "e_smp_wa.htm") ("SIN" . "f_sin_c.htm")
    ("SINGLE-FLOAT" . "t_short_.htm") ("SINGLE-FLOAT-EPSILON" . "v_short_.htm")
    ("SINGLE-FLOAT-NEGATIVE-EPSILON" . "v_short_.htm") ("SINH" . "f_sinh_.htm")
    ("SIXTH" . "f_firstc.htm") ("SLEEP" . "f_sleep.htm")
    ("SLOT-BOUNDP" . "f_slt_bo.htm") ("SLOT-EXISTS-P" . "f_slt_ex.htm")
    ("SLOT-MAKUNBOUND" . "f_slt_ma.htm") ("SLOT-MISSING" . "f_slt_mi.htm")
    ("SLOT-UNBOUND" . "f_slt_un.htm") ("SLOT-VALUE" . "f_slt_va.htm")
    ("SOFTWARE-TYPE" . "f_sw_tpc.htm") ("SOFTWARE-VERSION" . "f_sw_tpc.htm")
    ("SOME" . "f_everyc.htm") ("SORT" . "f_sort_.htm") ("SPACE" . "d_optimi.htm")
    ("SPECIAL" . "d_specia.htm") ("SPECIAL-OPERATOR-P" . "f_specia.htm")
    ("SPEED" . "d_optimi.htm") ("SQRT" . "f_sqrt_.htm")
    ("STABLE-SORT" . "f_sort_.htm") ("STANDARD" . "07_ffb.htm")
    ("STANDARD-CHAR" . "t_std_ch.htm") ("STANDARD-CHAR-P" . "f_std_ch.htm")
    ("STANDARD-CLASS" . "t_std_cl.htm")
    ("STANDARD-GENERIC-FUNCTION" . "t_std_ge.htm")
    ("STANDARD-METHOD" . "t_std_me.htm") ("STANDARD-OBJECT" . "t_std_ob.htm")
    ("STEP" . "m_step.htm") ("STORAGE-CONDITION" . "e_storag.htm")
    ("STORE-VALUE" . "a_store_.htm") ("STREAM" . "t_stream.htm")
    ("STREAM-ELEMENT-TYPE" . "f_stm_el.htm") ("STREAM-ERROR" . "e_stm_er.htm")
    ("STREAM-ERROR-STREAM" . "f_stm_er.htm")
    ("STREAM-EXTERNAL-FORMAT" . "f_stm_ex.htm") ("STREAMP" . "f_stmp.htm")
    ("STRING" . "a_string.htm") ("STRING-CAPITALIZE" . "f_stg_up.htm")
    ("STRING-DOWNCASE" . "f_stg_up.htm") ("STRING-EQUAL" . "f_stgeq_.htm")
    ("STRING-GREATERP" . "f_stgeq_.htm") ("STRING-LEFT-TRIM" . "f_stg_tr.htm")
    ("STRING-LESSP" . "f_stgeq_.htm") ("STRING-NOT-EQUAL" . "f_stgeq_.htm")
    ("STRING-NOT-GREATERP" . "f_stgeq_.htm") ("STRING-NOT-LESSP" . "f_stgeq_.htm")
    ("STRING-RIGHT-TRIM" . "f_stg_tr.htm") ("STRING-STREAM" . "t_stg_st.htm")
    ("STRING-TRIM" . "f_stg_tr.htm") ("STRING-UPCASE" . "f_stg_up.htm")
    ("STRING/=" . "f_stgeq_.htm") ("STRING<" . "f_stgeq_.htm")
    ("STRING<=" . "f_stgeq_.htm") ("STRING=" . "f_stgeq_.htm")
    ("STRING>" . "f_stgeq_.htm") ("STRING>=" . "f_stgeq_.htm")
    ("STRINGP" . "f_stgp.htm") ("STRUCTURE" . "f_docume.htm")
    ("STRUCTURE-CLASS" . "t_stu_cl.htm") ("STRUCTURE-OBJECT" . "t_stu_ob.htm")
    ("STYLE-WARNING" . "e_style_.htm") ("SUBLIS" . "f_sublis.htm")
    ("SUBSEQ" . "f_subseq.htm") ("SUBSETP" . "f_subset.htm")
    ("SUBST" . "f_substc.htm") ("SUBST-IF" . "f_substc.htm")
    ("SUBST-IF-NOT" . "f_substc.htm") ("SUBSTITUTE" . "f_sbs_s.htm")
    ("SUBSTITUTE-IF" . "f_sbs_s.htm") ("SUBSTITUTE-IF-NOT" . "f_sbs_s.htm")
    ("SUBTYPEP" . "f_subtpp.htm") ("SVREF" . "f_svref.htm")
    ("SXHASH" . "f_sxhash.htm") ("SYMBOL" . "t_symbol.htm")
    ("SYMBOL-FUNCTION" . "f_symb_1.htm") ("SYMBOL-MACROLET" . "s_symbol.htm")
    ("SYMBOL-NAME" . "f_symb_2.htm") ("SYMBOL-PACKAGE" . "f_symb_3.htm")
    ("SYMBOL-PLIST" . "f_symb_4.htm") ("SYMBOL-VALUE" . "f_symb_5.htm")
    ("SYMBOLP" . "f_symbol.htm") ("SYNONYM-STREAM" . "t_syn_st.htm")
    ("SYNONYM-STREAM-SYMBOL" . "f_syn_st.htm") ("T" . "a_t.htm")
    ("TAGBODY" . "s_tagbod.htm") ("TAILP" . "f_ldiffc.htm")
    ("TAN" . "f_sin_c.htm") ("TANH" . "f_sinh_.htm") ("TENTH" . "f_firstc.htm")
    ("TERPRI" . "f_terpri.htm") ("THE" . "s_the.htm") ("THIRD" . "f_firstc.htm")
    ("THROW" . "s_throw.htm") ("TIME" . "m_time.htm") ("TRACE" . "m_tracec.htm")
    ("TRANSLATE-LOGICAL-PATHNAME" . "f_tr_log.htm")
    ("TRANSLATE-PATHNAME" . "f_tr_pn.htm") ("TREE-EQUAL" . "f_tree_e.htm")
    ("TRUENAME" . "f_tn.htm") ("TRUNCATE" . "f_floorc.htm")
    ("TWO-WAY-STREAM" . "t_two_wa.htm")
    ("TWO-WAY-STREAM-INPUT-STREAM" . "f_two_wa.htm")
    ("TWO-WAY-STREAM-OUTPUT-STREAM" . "f_two_wa.htm") ("TYPE" . "a_type.htm")
    ("TYPE-ERROR" . "e_tp_err.htm") ("TYPE-ERROR-DATUM" . "f_tp_err.htm")
    ("TYPE-ERROR-EXPECTED-TYPE" . "f_tp_err.htm") ("TYPE-OF" . "f_tp_of.htm")
    ("TYPECASE" . "m_tpcase.htm") ("TYPEP" . "f_typep.htm")
    ("UNBOUND-SLOT" . "e_unboun.htm") ("UNBOUND-SLOT-INSTANCE" . "f_unboun.htm")
    ("UNBOUND-VARIABLE" . "e_unbo_1.htm") ("UNDEFINED-FUNCTION" . "e_undefi.htm")
    ("UNEXPORT" . "f_unexpo.htm") ("UNINTERN" . "f_uninte.htm")
    ("UNION" . "f_unionc.htm") ("UNLESS" . "m_when_.htm")
    ("UNREAD-CHAR" . "f_unrd_c.htm") ("UNSIGNED-BYTE" . "t_unsgn_.htm")
    ("UNTRACE" . "m_tracec.htm") ("UNUSE-PACKAGE" . "f_unuse_.htm")
    ("UNWIND-PROTECT" . "s_unwind.htm")
    ("UPDATE-INSTANCE-FOR-DIFFERENT-CLASS" . "f_update.htm")
    ("UPDATE-INSTANCE-FOR-REDEFINED-CLASS" . "f_upda_1.htm")
    ("UPGRADED-ARRAY-ELEMENT-TYPE" . "f_upgr_1.htm")
    ("UPGRADED-COMPLEX-PART-TYPE" . "f_upgrad.htm")
    ("UPPER-CASE-P" . "f_upper_.htm") ("USE-PACKAGE" . "f_use_pk.htm")
    ("USE-VALUE" . "a_use_va.htm") ("USER-HOMEDIR-PATHNAME" . "f_user_h.htm")
    ("VALUES" . "a_values.htm") ("VALUES-LIST" . "f_vals_l.htm")
    ("VARIABLE" . "f_docume.htm") ("VECTOR" . "a_vector.htm")
    ("VECTOR-POP" . "f_vec_po.htm") ("VECTOR-PUSH" . "f_vec_ps.htm")
    ("VECTOR-PUSH-EXTEND" . "f_vec_ps.htm") ("VECTORP" . "f_vecp.htm")
    ("WARN" . "f_warn.htm") ("WARNING" . "e_warnin.htm") ("WHEN" . "m_when_.htm")
    ("WILD-PATHNAME-P" . "f_wild_p.htm") ("WITH-ACCESSORS" . "m_w_acce.htm")
    ("WITH-COMPILATION-UNIT" . "m_w_comp.htm")
    ("WITH-CONDITION-RESTARTS" . "m_w_cnd_.htm")
    ("WITH-HASH-TABLE-ITERATOR" . "m_w_hash.htm")
    ("WITH-INPUT-FROM-STRING" . "m_w_in_f.htm")
    ("WITH-OPEN-FILE" . "m_w_open.htm") ("WITH-OPEN-STREAM" . "m_w_op_1.htm")
    ("WITH-OUTPUT-TO-STRING" . "m_w_out_.htm")
    ("WITH-PACKAGE-ITERATOR" . "m_w_pkg_.htm")
    ("WITH-SIMPLE-RESTART" . "m_w_smp_.htm") ("WITH-SLOTS" . "m_w_slts.htm")
    ("WITH-STANDARD-IO-SYNTAX" . "m_w_std_.htm") ("WRITE" . "f_wr_pr.htm")
    ("WRITE-BYTE" . "f_wr_by.htm") ("WRITE-CHAR" . "f_wr_cha.htm")
    ("WRITE-LINE" . "f_wr_stg.htm") ("WRITE-SEQUENCE" . "f_wr_seq.htm")
    ("WRITE-STRING" . "f_wr_stg.htm") ("WRITE-TO-STRING" . "f_wr_to_.htm")
    ("Y-OR-N-P" . "f_y_or_n.htm") ("YES-OR-NO-P" . "f_y_or_n.htm")
    ("ZEROP" . "f_zerop.htm")))


(defun load-clhs-map ()
  (dolist (pair +clhs-map+)
    (setf (multilang-documentation:documentation* (find-symbol (car pair) 'common-lisp) :clhs :en)
          (puri:render-uri (puri:merge-uris (cdr pair) +clhs-map-root+) nil))))


(defgeneric inspect-fragment (stream frag detail-level)
  (:method (stream frag detail-level)
    (declare (ignore stream frag detail-level))))


(defun inspect-package (stream name detail-level)
  (when-let ((pkg (find-package name)))
    (format stream "# ~:/mdf:text/ [package]~@[~%~%~:/mdf:pre/~]~@[~%~%## Nicknames~%~%~(~{~@/mdf:text/~^, ~}~)~]"
                    (package-name pkg)
                    (documentation pkg t)
                    (package-nicknames pkg))
    (unless (zerop detail-level)
      (let (exports)
        (do-external-symbols (sym pkg)
          (push sym exports))
        (when exports
          (format stream "~%~%## Exports~%~%~{~@/mdf:text/~^, ~}"
                         exports))))))


(defun inspect-method (stream name package statuses detail-level))


(defun inspect-symbol-system (stream sym detail-level)
  #+asdf3.1
  (when-let* ((system-name (asdf/package-inferred-system::package-name-system (package-name (symbol-package sym))))
              (system (asdf:find-system system-name nil)))
    (if (asdf:system-homepage system)
      (format stream "~%~%From system [~A](~A)" system-name (asdf:system-homepage system))
      (format stream "~%~%From system ~A" system-name))
    (when-let ((license (asdf:system-license system)))
      (format stream " (~A)" license))
    (when-let ((author (asdf:system-author system)))
      (format stream " by ~A" author))))


(defun inspect-symbol-variable (stream sym detail-level)
  (when (boundp sym)
    (format stream "~%~%## ~:[Dynamic~;Constant~] Variable~@[~%~%~:/mdf:pre/~]~%~%~@/mdf:code/"
            (constantp sym)
            (documentation sym 'variable)
            (symbol-value sym))))


(defun inspect-symbol-function (stream sym detail-level)
  (when (fboundp sym)
    (format stream "~%~%## ~A~@[~%~%~:/mdf:pre/~%~%~]~%~%### Syntax~%~%~@/mdf:code/"
            (cond
              ((special-operator-p sym)
                "Special")
              ((macro-function sym)
                "Macro")
              ((typep (fdefinition sym) 'standard-generic-function)
                "Generic Function")
              (t
                "Function"))
            (documentation sym 'function)
            (cons sym (lambda-list sym)))))


(defun inspect-symbol-class (stream sym detail-level)
  (when-let ((cls (find-class sym nil)))
    (format stream "~%~%## ~:[Class~;Structure~]~@[~%~%~:/mdf:pre/~]~%~%### Precedence List~%~%~{~@/mdf:text/~^, ~}"
            (subtypep cls (find-class 'structure-object))
            (documentation sym 'type)
            (mapcar #'class-name (closer-mop:class-precedence-list cls)))
    (when (closer-mop:class-slots cls)
      (format stream "~%~%### Slots~%")
      (dolist (slot (closer-mop:class-slots cls))
        (format stream "~%- ~/mdf:text/~@[ \\[~/mdf:text/\\]~]~@[ &mdash; ~:/mdf:text/~]~{~%    - :initarg ~/mdf:text/~}~@[~%    - :allocation ~/mdf:text/~]"
                (closer-mop:slot-definition-name slot)
                (unless (eql t (closer-mop:slot-definition-type slot))
                  (closer-mop:slot-definition-type slot))
                (if (listp (documentation slot t))
                  (first (documentation slot t))
                  (documentation slot t))
                (closer-mop:slot-definition-initargs slot)
                (unless (eql :instance (closer-mop:slot-definition-allocation slot))
                  (closer-mop:slot-definition-allocation slot)))))
    (when-let ((methods (find-methods cls)))
      (format stream "~%~%### Methods~%")
      (dolist (method methods)
        (let ((name (closer-mop:generic-function-name (closer-mop:method-generic-function method)))
              (lambda-list (method-specialized-lambda-list method))
              (mdf:*indent-level* 1))
          (format stream "~%- ~/mdf:text/~@[ &mdash; ~:/mdf:text/~]~%~%~@/mdf:code/~%~%"
                  (if (listp name) (second name) name)
                  (documentation method t)
                  (if (listp name)
                    `(setf (,(second name) ,@(cdr lambda-list)) ,(first lambda-list))
                    `(,name ,@lambda-list))))))))


(defun do-inspect-symbol (stream sym detail-level)
  (format stream "~%~%# ~/mdf:text/ \\[symbol\\]" sym)
  (inspect-symbol-system stream sym detail-level)
  (when-let ((clhs-link (multilang-documentation:documentation sym :clhs)))
    (format stream "~%~%See also: [CLHS](~A)" clhs-link))
  (inspect-symbol-variable stream sym detail-level)
  (inspect-symbol-function stream sym detail-level)
  (inspect-symbol-class stream sym detail-level))


(defun inspect-symbol (stream name package statuses detail-level)
  (when package
    (multiple-value-bind (sym status)
                         (find-symbol name package)
      (when (member status statuses :test #'eql)
        (do-inspect-symbol stream sym detail-level)))))


(defmethod inspect-fragment (stream (frag symbol-name-fragment) detail-level)
  (inspect-fragment stream (fragment-parent frag) detail-level))


(defmethod inspect-fragment (stream (frag package-marker-fragment) detail-level)
  (inspect-fragment stream (fragment-parent frag) detail-level))


(defmethod inspect-fragment (stream (frag symbol-fragment) detail-level)
  (with-slots (status position children)
              frag
    (let ((symbol-name (fragment-value (car (last children)))))
      (cond
        ((eql :local status)
          (inspect-package stream symbol-name detail-level)
          (inspect-method stream symbol-name *package* '(:internal :external :inherited) detail-level)
          (inspect-symbol stream symbol-name *package* '(:internal :external :inherited) detail-level))
        (t
          (let ((pkg (find-package (if (zerop (length (fragment-value (first children))))
                                    "KEYWORD"
                                    (fragment-value (first children))))))
            (inspect-method stream symbol-name pkg (list status) detail-level)
            (inspect-symbol stream symbol-name pkg (list status) detail-level)))))))


(defmethod inspect-fragment (stream (frag package-name-fragment) detail-level)
  (inspect-package stream (fragment-value frag) detail-level))


(defmethod inspect-fragment (stream (frag fragment) detail-level)
  (when (fragment-children frag)
    (inspect-fragment stream (first (fragment-children frag)) detail-level)))


(defmethod jupyter:inspect-code ((k kernel) code cursor-pos detail-level)
  (jupyter:make-inline-result
    (with-output-to-string (stream)
      (inspect-fragment stream (locate-fragment code (1- cursor-pos)) detail-level))
    :mime-type "text/markdown"))

